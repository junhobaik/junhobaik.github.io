{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## 1.1.1 A Nuts-and-Bolts Description\n\n인터넷은 이미 우리 생활 속에서 필수불가결한 존재이며, PC, 스마트폰 뿐만 아니라 IoT(Internet of Things) 산업의 발달로 가전제품, 자동차에도 인터넷을 활용한 여러가지 기능이 추가되고 있다. 이러한 인터넷이 정확히 어떤 것인지 설명하기 위해  \"Nuts-and-Bolts Description\", 볼트와 너트가 결합하여 부품을 형성하는 관점에서 인터넷을 살펴보자.\n\n### What's the Internet : \"nuts and bolts\" view\n\n|            개념            |                 구성요소1                 |   구성요소2    | 구성요소3                                |\n| :------------------------: | :---------------------------------------: | :------------: | ---------------------------------------- |\n|          Internet          | Internet Device<br />(Host(=end systems)) | Router(Switch) | Communication Link<br />(Wired/Wireless) |\n| Nuts-and-Bolts Description |                   Nuts                    |      Part      | Bolts                                    |\n\n어떠한 부품을 만들기 위해 각 **구성요소(볼트, 너트, 하위 부품)를 조합하는 과정**을 **인터넷 연결 형성 개념**에 도입하기 전에, \n\n우선 **네트워크**를 다음과 같이 설명할 수 있다.\n\n> 네트워킹 서비스를 제공하는 Host Device들이 유, 무선 링크를 통해 패킷을 보내고, 해당 패킷이 라우터(스위치) 간 통신을 거쳐 다른 Host, 또는 Client Device에 전송된다면 그것을 가장 기초적인 수준의 네트워크라고 볼 수 있을 것이다.\n\n그렇다면 **인터넷**은 어떻게 설명하고 있는지 살펴보자.\n\n>  The Internet is all about connecting end systems to each other, so the ISPs that provide access to end systems must also be interconnected.\n>\n> 인터넷은 end systems를 서로 연결하는 것에 관한 모든 것이다. 따라서 end systems에 접근하게 하는 ISPs들 또한 모두 상호 연결되어야 한다.\n\n본래 인터넷(Internet)은 Inter(상호 연결) + Network(네트워크)의 합성어이다.\n따라서 그냥 **복수 네트워크 간의 연결**이라고 이해해도 무방한데, 왜 교재에서는 ISPs 간의 연결을 강조하고 있는걸까?\n\nISPs는 Internet Service Providers(인터넷 서비스 제공자)를 의미한다.\n우리가 실생활에서 쉽게 떠올릴 수 있는 ISPs는 SKT, KT, LGU+ 등의 통신 판매업을 주로 하고 있는 기업들이 있고, 해당 기업의 고객이 서비스를 요청하면, 고객의 거주지는 해당하는 지역 네트워크망에 연결된다. 고객은 네트워크망에 접속하여 자유롭게 인터넷 서비스를 이용할 것이다. 물리적으로 멀리 떨어진 상대와 대화를 나누거나, 인터넷을 이용해 정보를 찾거나, 네트워킹 서비스를 활용한 인터넷 게임을 즐길 수도 있을 것이다. 그러려면 물리적으로 멀리 떨어진 상대도 ISPs를 통해 해당 지역 네트워크망에 연결되어 있어야 하고, 인터넷 게임 서비스와 포털 검색 서비스를 제공하는 회사 또한 ISPs를 통해 해당 지역 네트워크망에 연결되어 있어야 한다.\n\n즉, 복수 네트워크 간의 연결에 있어서 **ISPs는 필연적으로 상호 연결**되어 있어야 한다는 것이다.\n\n![infra](infra.png)\n\n## 1.1.2 A Service Description\n\n인터넷은 너트와 볼트 관점 말고도 **서비스 관점**에서 설명 될 수 있다.\n우리가 인터넷 서비스를 이용할 때 어떻게 이용하는지, ISPs가 우리에게 인터넷 서비스를 어떻게 제공하는지를 살펴보는 것이다. 일반 사용자는 인터넷을 이용할 때 Host 간 패킷이 라우터와 링크를 통해 오고 가는 과정을 생각하며 이용하지 않는다. 이들은 인터넷 서비스 그 자체에 더욱 익숙할 것이다. 즉, 인터넷 서비스를 제공하거나, 제공받기 위해 필요한 **intfrastructure(하부구조)**를 설명하면 된다.\n라우터 간 연결을 통해 일정 규모의 네트워크가 형성되면, 이것이 인터넷 서비스를 위한 하부구조가 될 수 있다. 인터넷 서비스를 사용자들에게 제공하는 응용 프로그램들은, 하부구조를 이용해 필요한 정보를 서로 요청하거나, 그에 대한 응답을 전송해야한다.\n한 마디로 정리하면 다음과 같을 것이다.\n\n> 인터넷은 사용자에게 서비스를 제공하기 위한 응용 프로그램들이 서로 통신할 수 있게 하부구조를 구축해 놓은 것이다.\n\n인터넷을 설명하는 두 가지 관점은 각각 하드웨어와 소프트웨어 관점에서 인터넷을 바라보는 것에 해당한다.\n다음 글에서는 두 개 이상의 통신 수단이 통신 과정에서 지켜야하는 규약, 프로토콜에 대해 알아보자.","excerpt":"1.1.1 A Nuts-and-Bolts Description 인터넷은 이미 우리 생활 속에서 필수불가결한 존재이며, PC, 스마트폰 뿐만 아니라 IoT(Internet of Things) 산업의 발달로 가전제품, 자동차에도 인터넷을 활용한 여러가지…","fields":{"slug":"/What-is-Internet/"},"frontmatter":{"date":"Nov 02, 2021","title":"인터넷이란?","tags":["network"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 목차\n\n- HTTP란\n    - HTTP 1.0 / 1.1\n    - HTTP 2\n- HTTP Request Protocol\n    - HTTP method : GET\n    - HTTP method : POST\n    - HTTP method : others...\n- HTTP Response Protocol\n\n## HTTP란\n\nHTTP는 Hyper Text Transfer Protocol로서, 둘 이상의 웹 통신을 하는 개체들이 MIME Type의 데이터를 주고 받을 때 사용하는 Protocol이다.\n\n> MIME 타입이란 클라이언트에게 전송된 문서의 다양성을 알려주기 위한 메커니즘입니다: 웹에서 파일의 확장자는 별 의미가 없습니다. 그러므로, 각 문서와 함께 올바른 MIME 타입을 전송하도록, 서버가 정확히 설정하는 것이 중요합니다. 브라우저들은 리소스를 내려받았을 때 해야 할 기본 동작이 무엇인지를 결정하기 위해 대게 MIME 타입을 사용합니다.\n출처 : [https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types](https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\n> \n\n![image](image.png)\n\n### HTTP 1.0 / 1.1\n\n**HTTP 1.0**\n\n\"한 개의 연결 → 한 개의 데이터 수신\"\n\n초기 웹 통신에는 적절하였으나, Client로 전송하는 데이터의 양이 늘어나면서 네트워크 부하 발생.\n\n![http_1.0.png](http_1.0.png)\n\n**HTTP 1.1 : persistent connection**\n\nkeep alive 기능을 도입하여 이미 연결된 TCP 연결을 재사용 → 정적 웹 페이지에서 약 50% 성능 향상\n\n서버가 여러 곳의 Client request를 받는 경우 해당 연결에 모두 keep alive를 적용해야 하는데,\n\n\"1 keep alive → 1 process\"\n\n프로세스 개수가 늘어나면 서버의 메모리에 부하가 발생.\n\n즉 대형 서비스 운용에 적합하지 못했음.\n\n**HTTP 1.1 : pipelining**\n\nHTTP 1.1에서 a, b, c 순의 request가 server로 들어올 때, 이에 대한 응답도 a, b, c 순이어야 함.\n\n기존에 request b를 보내기 전에 response a가 수신 될 때 까지 기다렸다면,\n\npipelining에선 a, b, c의 모든 요청을 한 번에 보낸 뒤에 받은 순서에 따라 response를 보내줌.\n\n**HTTP 1.1 : Head of Line Blocking**\n\n순차적 요청에 따른 순차적 응답 방식의 고질적인 문제점. 앞선 요청에 대한 응답이 지연된다면, 대기 중인 요청도 같이 지연되어 Latency 증가함.\n\n**HTTP 1.1 : Repeat of Header**\n\n![image (1).png](image_(1).png)\n\n연속된 요청의 경우 각기 다른 데이터에 대한 요청임에도 Header 구조의 중복이 생기기 때문에, 전송되는 데이터의 크기에 비해 내포된 정보의 양은 많지 않은 경우 발생. (Resource 낭비)\n\n### HTTP 2\n\n![binary_framing_layer01.svg](binary_framing_layer01.svg)\n\nHTTP 요청문 structure 변화\n\n(Header / Data) Frame 계층 사용 → 파싱, 전송 속도 증가, 오류 발생 가능성 줄어듬.\n\n![streams_messages_frames01.svg](streams_messages_frames01.svg)\n\nServer ↔ Client 간 Stream 활성 중에 frame들이 전송됨. (순서 사라짐)\n\n![스크린샷 2021-10-07 오후 5.32.42.png](HTTP_2.0_Connection.png)\n\nMultiflex(다중화) 실현 → Head of Line Blocking 문제 해결\n\n## HTTP Request Protocol\n\n![스크린샷 2021-10-07 오후 5.38.22.png](Rq.png)\n\n요청 프로토콜 구조\n\n![스크린샷 2021-10-07 오후 5.08.06.png](Rq_naver.png)\n\nHTTP 요청 프로토콜의 구조는 그림과 같고, 아래 메시지는 실제 네이버 웹사이트에 접속 했을 때 발생하는 요청 프로토콜 중 하나의 내용을 캡쳐한 것이다.\n\n### GET 메소드\n\nGET은 클라이언트가 사용하는 메소드 중 하나로, Server로부터 특정 데이터를 읽어올 때 사용한다.\n\n기본 형식은 다음과 같다\n\n> GET [request-uri]?query_string HTTP/1.1\nHost:[Hostname] 혹은 [IP]\n> \n\n### POST 메소드\n\nPOST도 GET과 같이 클라이언트가 사용하는 메소드 중 하나로, 보통 Client가 특정 데이터를 Server로 전송할 때 사용한다.\n\n보내는 요청 받은 데이터 정보가 body에 있다.\n\n![스크린샷 2021-10-07 오후 5.39.27.png](method.png)\n\n## HTTP Response Protocol\n\n![스크린샷 2021-10-07 오후 5.45.11.png](Rs.png)\n\n응답 프로토콜의 구조는 그림과 같은데, 주목할 것은 Status Line의 reponse code이다.\n\n![스크린샷 2021-10-07 오후 5.43.24.png](Rs_code.png)","excerpt":"목차 HTTP란 HTTP 1.0 / 1.1 HTTP 2 HTTP Request Protocol HTTP method : GET HTTP method : POST HTTP method : others... HTTP Response Protocol HT…","fields":{"slug":"/What-is-HTTP/"},"frontmatter":{"date":"Oct 31, 2021","title":"HTTP란?","tags":["network"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}