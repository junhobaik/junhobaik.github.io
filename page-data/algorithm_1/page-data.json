{"componentChunkName":"component---src-templates-post-tsx","path":"/algorithm_1/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>일요일을 제외하고 매일매일 알고리즘 문제를 하나씩 풀고 있다. 알고리즘 문제 중에 고전했거나 좋다고 생각하는 문제를 포스팅 하려고 한다.</p>\n</blockquote>\n<br/>\n<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Given an array of strings, group anagrams together.\n\nExample:\n\nInput: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],\nOutput:\n[\n  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],\n  [&quot;nat&quot;,&quot;tan&quot;],\n  [&quot;bat&quot;]\n]\nNote:\n\nAll inputs will be in lowercase.\nThe order of your output does not matter.</code></pre></div>\n<br/>\n<p>이 문제는 <code class=\"language-text\">Hash Map</code>을 알고 있다면 풀기 수월한 문제였다. 나도 처음에는 <code class=\"language-text\">Hash Map</code>의 존재를 몰랐는데, 문제가 풀리지 않아서 구글링을 해보니\n여러 백엔드분들이 <code class=\"language-text\">Hash Map</code>을 사용하는 것을 보았다. 그 분들은 자바와 파이썬으로 풀었지만 나는 <code class=\"language-text\">javascript</code>를 사용하는 프론트인 관계로\n<code class=\"language-text\">javascript</code>로 풀어보았다.</p>\n<p><code class=\"language-text\">해쉬맵</code>의 구조는 객체와 아주 비슷하다. 즉, 사실 이 문제는 객체를 활용하면 금방 풀 수 있는 문제다. 그런데 객체를 사용하는 것 까지는 알겠는데 객체의\n키 값을 어떻게 정해야 할까? 나는 <code class=\"language-text\">.sort()</code>를 사용하기로 했다. 정확하게 같은 철자가 들어있는 것들끼리 묶으면 되기 때문에 단어를 <code class=\"language-text\">.split()</code>해서\n철자 하나하나로 나눈 뒤에 <code class=\"language-text\">.sort()</code>로 정렬해준다. 먄약 같은 철자를 가지고 있다면 <code class=\"language-text\">.sort()</code>한 값이 같을 것이다.</p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">groupAnagrams</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//빈 객체를 생성해준다.</span>\n\n  strs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> al <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    result<span class=\"token punctuation\">[</span>al<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> result<span class=\"token punctuation\">[</span>al<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> result<span class=\"token punctuation\">[</span>al<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 동일한 키값을 만들어준 뒤, 같은 키값을 갖고 있으면 배열에 push해주고</span>\n  <span class=\"token comment\">// 아니라면 새로운 key:value쌍을 만든다.</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//객체의 vlaue값만 가져와준다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"…","tableOfContents":"<ul>\n<li><a href=\"/algorithm_1/#%EB%AC%B8%EC%A0%9C\">문제</a></li>\n<li><a href=\"/algorithm_1/#%ED%92%80%EC%9D%B4\">풀이</a></li>\n</ul>","fields":{"slug":"/algorithm_1/"},"frontmatter":{"title":"2020-06-27 groupAnagrams","date":"Jun 28, 2020","tags":["algorithm","javascript"],"keywords":["algorithm","javascript","leetcode"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/algorithm_1/","series":[{"slug":"/algorithm_1/","title":"2020-06-27 groupAnagrams","num":1}],"lastmod":"0001-01-01"}}}